// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"
	"net/url"
	"strings"

	"github.com/ogen-go/ogen/uri"
)

func (s *Server) cutPrefix(path string) (string, bool) {
	prefix := s.cfg.Prefix
	if prefix == "" {
		return path, true
	}
	if !strings.HasPrefix(path, prefix) {
		// Prefix doesn't match.
		return "", false
	}
	// Cut prefix from the path.
	return strings.TrimPrefix(path, prefix), true
}

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	elemIsEscaped := false
	if rawPath := r.URL.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
			elemIsEscaped = strings.ContainsRune(elem, '%')
		}
	}

	elem, ok := s.cutPrefix(elem)
	if !ok || len(elem) == 0 {
		s.notFound(w, r)
		return
	}
	args := [1]string{}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/v1/"
			origElem := elem
			if l := len("/v1/"); len(elem) >= l && elem[0:l] == "/v1/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'a': // Prefix: "auth/"
				origElem := elem
				if l := len("auth/"); len(elem) >= l && elem[0:l] == "auth/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'r': // Prefix: "refresh"
					origElem := elem
					if l := len("refresh"); len(elem) >= l && elem[0:l] == "refresh" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handleV1AuthRefreshPostRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}

					elem = origElem
				case 's': // Prefix: "sign"
					origElem := elem
					if l := len("sign"); len(elem) >= l && elem[0:l] == "sign" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'i': // Prefix: "in"
						origElem := elem
						if l := len("in"); len(elem) >= l && elem[0:l] == "in" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleV1AuthSigninPostRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}

						elem = origElem
					case 'u': // Prefix: "up"
						origElem := elem
						if l := len("up"); len(elem) >= l && elem[0:l] == "up" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleV1AuthSignupPostRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}

						elem = origElem
					}

					elem = origElem
				case 'u': // Prefix: "user"
					origElem := elem
					if l := len("user"); len(elem) >= l && elem[0:l] == "user" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleV1AuthUserGetRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}

					elem = origElem
				}

				elem = origElem
			case 'c': // Prefix: "c"
				origElem := elem
				if l := len("c"); len(elem) >= l && elem[0:l] == "c" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'a': // Prefix: "atalog/"
					origElem := elem
					if l := len("atalog/"); len(elem) >= l && elem[0:l] == "atalog/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'c': // Prefix: "cities"
						origElem := elem
						if l := len("cities"); len(elem) >= l && elem[0:l] == "cities" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleV1CatalogCitiesPostRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}

						elem = origElem
					case 'o': // Prefix: "objects"
						origElem := elem
						if l := len("objects"); len(elem) >= l && elem[0:l] == "objects" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleV1CatalogObjectsGetRequest([0]string{}, elemIsEscaped, w, r)
							case "POST":
								s.handleV1CatalogObjectsPostRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET,POST")
							}

							return
						}

						elem = origElem
					case 'r': // Prefix: "regions"
						origElem := elem
						if l := len("regions"); len(elem) >= l && elem[0:l] == "regions" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleV1CatalogRegionsPostRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}

						elem = origElem
					case 's': // Prefix: "services"
						origElem := elem
						if l := len("services"); len(elem) >= l && elem[0:l] == "services" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleV1CatalogServicesGetRequest([0]string{}, elemIsEscaped, w, r)
							case "POST":
								s.handleV1CatalogServicesPostRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET,POST")
							}

							return
						}

						elem = origElem
					}

					elem = origElem
				case 'o': // Prefix: "omments/verifications"
					origElem := elem
					if l := len("omments/verifications"); len(elem) >= l && elem[0:l] == "omments/verifications" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleV1CommentsVerificationsGetRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}

					elem = origElem
				}

				elem = origElem
			case 'e': // Prefix: "employee"
				origElem := elem
				if l := len("employee"); len(elem) >= l && elem[0:l] == "employee" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "POST":
						s.handleV1EmployeePostRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "POST")
					}

					return
				}

				elem = origElem
			case 'o': // Prefix: "organizations"
				origElem := elem
				if l := len("organizations"); len(elem) >= l && elem[0:l] == "organizations" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleV1OrganizationsGetRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					origElem := elem
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'v': // Prefix: "verifications"
						origElem := elem
						if l := len("verifications"); len(elem) >= l && elem[0:l] == "verifications" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleV1OrganizationsVerificationsGetRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

						elem = origElem
					}
					// Param: "organizationID"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleV1OrganizationsOrganizationIDGetRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 't': // Prefix: "tenders"
							origElem := elem
							if l := len("tenders"); len(elem) >= l && elem[0:l] == "tenders" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleV1OrganizationsOrganizationIDTendersGetRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

							elem = origElem
						case 'v': // Prefix: "verifications"
							origElem := elem
							if l := len("verifications"); len(elem) >= l && elem[0:l] == "verifications" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleV1OrganizationsOrganizationIDVerificationsGetRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								case "POST":
									s.handleV1OrganizationsOrganizationIDVerificationsPostRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET,POST")
								}

								return
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 's': // Prefix: "su"
				origElem := elem
				if l := len("su"); len(elem) >= l && elem[0:l] == "su" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'g': // Prefix: "ggest/c"
					origElem := elem
					if l := len("ggest/c"); len(elem) >= l && elem[0:l] == "ggest/c" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'i': // Prefix: "ity"
						origElem := elem
						if l := len("ity"); len(elem) >= l && elem[0:l] == "ity" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleV1SuggestCityGetRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

						elem = origElem
					case 'o': // Prefix: "ompany"
						origElem := elem
						if l := len("ompany"); len(elem) >= l && elem[0:l] == "ompany" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleV1SuggestCompanyGetRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

						elem = origElem
					}

					elem = origElem
				case 'r': // Prefix: "rvey"
					origElem := elem
					if l := len("rvey"); len(elem) >= l && elem[0:l] == "rvey" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handleV1SurveyPostRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}

					elem = origElem
				}

				elem = origElem
			case 't': // Prefix: "tenders"
				origElem := elem
				if l := len("tenders"); len(elem) >= l && elem[0:l] == "tenders" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleV1TendersGetRequest([0]string{}, elemIsEscaped, w, r)
					case "POST":
						s.handleV1TendersPostRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET,POST")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					origElem := elem
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'v': // Prefix: "verifications"
						origElem := elem
						if l := len("verifications"); len(elem) >= l && elem[0:l] == "verifications" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleV1TendersVerificationsGetRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

						elem = origElem
					}
					// Param: "tenderID"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleV1TendersTenderIDGetRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "PUT":
							s.handleV1TendersTenderIDPutRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET,PUT")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'c': // Prefix: "comments"
							origElem := elem
							if l := len("comments"); len(elem) >= l && elem[0:l] == "comments" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleV1TendersTenderIDCommentsGetRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								case "POST":
									s.handleV1TendersTenderIDCommentsPostRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET,POST")
								}

								return
							}

							elem = origElem
						case 'r': // Prefix: "respond"
							origElem := elem
							if l := len("respond"); len(elem) >= l && elem[0:l] == "respond" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleV1TendersTenderIDRespondPostRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'u': // Prefix: "users"
				origElem := elem
				if l := len("users"); len(elem) >= l && elem[0:l] == "users" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleV1UsersGetRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					origElem := elem
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'c': // Prefix: "confirm/"
						origElem := elem
						if l := len("confirm/"); len(elem) >= l && elem[0:l] == "confirm/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'e': // Prefix: "email"
							origElem := elem
							if l := len("email"); len(elem) >= l && elem[0:l] == "email" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleV1UsersConfirmEmailPostRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}

							elem = origElem
						case 'p': // Prefix: "password"
							origElem := elem
							if l := len("password"); len(elem) >= l && elem[0:l] == "password" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleV1UsersConfirmPasswordPostRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}

							elem = origElem
						}

						elem = origElem
					case 'r': // Prefix: "request/"
						origElem := elem
						if l := len("request/"); len(elem) >= l && elem[0:l] == "request/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'e': // Prefix: "email-verification"
							origElem := elem
							if l := len("email-verification"); len(elem) >= l && elem[0:l] == "email-verification" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleV1UsersRequestEmailVerificationPostRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}

							elem = origElem
						case 'r': // Prefix: "reset-password"
							origElem := elem
							if l := len("reset-password"); len(elem) >= l && elem[0:l] == "reset-password" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleV1UsersRequestResetPasswordPostRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}

							elem = origElem
						}

						elem = origElem
					}
					// Param: "userID"
					// Leaf parameter
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleV1UsersUserIDGetRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}

					elem = origElem
				}

				elem = origElem
			case 'v': // Prefix: "verifications/"
				origElem := elem
				if l := len("verifications/"); len(elem) >= l && elem[0:l] == "verifications/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "requestID"
				// Match until "/"
				idx := strings.IndexByte(elem, '/')
				if idx < 0 {
					idx = len(elem)
				}
				args[0] = elem[:idx]
				elem = elem[idx:]

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					origElem := elem
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'a': // Prefix: "aprove"
						origElem := elem
						if l := len("aprove"); len(elem) >= l && elem[0:l] == "aprove" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleV1VerificationsRequestIDAprovePostRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}

						elem = origElem
					case 'd': // Prefix: "deny"
						origElem := elem
						if l := len("deny"); len(elem) >= l && elem[0:l] == "deny" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleV1VerificationsRequestIDDenyPostRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			}

			elem = origElem
		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name        string
	summary     string
	operationID string
	pathPattern string
	count       int
	args        [1]string
}

// Name returns ogen operation name.
//
// It is guaranteed to be unique and not empty.
func (r Route) Name() string {
	return r.name
}

// Summary returns OpenAPI summary.
func (r Route) Summary() string {
	return r.summary
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.operationID
}

// PathPattern returns OpenAPI path.
func (r Route) PathPattern() string {
	return r.pathPattern
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
//
// Note: this method does not unescape path or handle reserved characters in path properly. Use FindPath instead.
func (s *Server) FindRoute(method, path string) (Route, bool) {
	return s.FindPath(method, &url.URL{Path: path})
}

// FindPath finds Route for given method and URL.
func (s *Server) FindPath(method string, u *url.URL) (r Route, _ bool) {
	var (
		elem = u.Path
		args = r.args
	)
	if rawPath := u.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
		}
		defer func() {
			for i, arg := range r.args[:r.count] {
				if unescaped, err := url.PathUnescape(arg); err == nil {
					r.args[i] = unescaped
				}
			}
		}()
	}

	elem, ok := s.cutPrefix(elem)
	if !ok {
		return r, false
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/v1/"
			origElem := elem
			if l := len("/v1/"); len(elem) >= l && elem[0:l] == "/v1/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'a': // Prefix: "auth/"
				origElem := elem
				if l := len("auth/"); len(elem) >= l && elem[0:l] == "auth/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'r': // Prefix: "refresh"
					origElem := elem
					if l := len("refresh"); len(elem) >= l && elem[0:l] == "refresh" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "POST":
							r.name = "V1AuthRefreshPost"
							r.summary = "Get new access token"
							r.operationID = ""
							r.pathPattern = "/v1/auth/refresh"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

					elem = origElem
				case 's': // Prefix: "sign"
					origElem := elem
					if l := len("sign"); len(elem) >= l && elem[0:l] == "sign" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'i': // Prefix: "in"
						origElem := elem
						if l := len("in"); len(elem) >= l && elem[0:l] == "in" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "POST":
								r.name = "V1AuthSigninPost"
								r.summary = "Signin User"
								r.operationID = ""
								r.pathPattern = "/v1/auth/signin"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

						elem = origElem
					case 'u': // Prefix: "up"
						origElem := elem
						if l := len("up"); len(elem) >= l && elem[0:l] == "up" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "POST":
								r.name = "V1AuthSignupPost"
								r.summary = "Signup User"
								r.operationID = ""
								r.pathPattern = "/v1/auth/signup"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

						elem = origElem
					}

					elem = origElem
				case 'u': // Prefix: "user"
					origElem := elem
					if l := len("user"); len(elem) >= l && elem[0:l] == "user" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "GET":
							r.name = "V1AuthUserGet"
							r.summary = "Get currently authenticated user"
							r.operationID = ""
							r.pathPattern = "/v1/auth/user"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

					elem = origElem
				}

				elem = origElem
			case 'c': // Prefix: "c"
				origElem := elem
				if l := len("c"); len(elem) >= l && elem[0:l] == "c" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'a': // Prefix: "atalog/"
					origElem := elem
					if l := len("atalog/"); len(elem) >= l && elem[0:l] == "atalog/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'c': // Prefix: "cities"
						origElem := elem
						if l := len("cities"); len(elem) >= l && elem[0:l] == "cities" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "POST":
								r.name = "V1CatalogCitiesPost"
								r.summary = "Add city to catalog"
								r.operationID = ""
								r.pathPattern = "/v1/catalog/cities"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

						elem = origElem
					case 'o': // Prefix: "objects"
						origElem := elem
						if l := len("objects"); len(elem) >= l && elem[0:l] == "objects" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = "V1CatalogObjectsGet"
								r.summary = "Get a list of all available objects"
								r.operationID = ""
								r.pathPattern = "/v1/catalog/objects"
								r.args = args
								r.count = 0
								return r, true
							case "POST":
								r.name = "V1CatalogObjectsPost"
								r.summary = "Create catalog object"
								r.operationID = ""
								r.pathPattern = "/v1/catalog/objects"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

						elem = origElem
					case 'r': // Prefix: "regions"
						origElem := elem
						if l := len("regions"); len(elem) >= l && elem[0:l] == "regions" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "POST":
								r.name = "V1CatalogRegionsPost"
								r.summary = "Add region to catalog"
								r.operationID = ""
								r.pathPattern = "/v1/catalog/regions"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

						elem = origElem
					case 's': // Prefix: "services"
						origElem := elem
						if l := len("services"); len(elem) >= l && elem[0:l] == "services" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = "V1CatalogServicesGet"
								r.summary = "Get a list of all available services"
								r.operationID = ""
								r.pathPattern = "/v1/catalog/services"
								r.args = args
								r.count = 0
								return r, true
							case "POST":
								r.name = "V1CatalogServicesPost"
								r.summary = "Create catalog service"
								r.operationID = ""
								r.pathPattern = "/v1/catalog/services"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

						elem = origElem
					}

					elem = origElem
				case 'o': // Prefix: "omments/verifications"
					origElem := elem
					if l := len("omments/verifications"); len(elem) >= l && elem[0:l] == "omments/verifications" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "GET":
							r.name = "V1CommentsVerificationsGet"
							r.summary = "Get verification requests"
							r.operationID = ""
							r.pathPattern = "/v1/comments/verifications"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

					elem = origElem
				}

				elem = origElem
			case 'e': // Prefix: "employee"
				origElem := elem
				if l := len("employee"); len(elem) >= l && elem[0:l] == "employee" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch method {
					case "POST":
						r.name = "V1EmployeePost"
						r.summary = "Create employee user"
						r.operationID = ""
						r.pathPattern = "/v1/employee"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}

				elem = origElem
			case 'o': // Prefix: "organizations"
				origElem := elem
				if l := len("organizations"); len(elem) >= l && elem[0:l] == "organizations" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = "V1OrganizationsGet"
						r.summary = "Get organizations"
						r.operationID = ""
						r.pathPattern = "/v1/organizations"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					origElem := elem
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'v': // Prefix: "verifications"
						origElem := elem
						if l := len("verifications"); len(elem) >= l && elem[0:l] == "verifications" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = "V1OrganizationsVerificationsGet"
								r.summary = "Get verification requests"
								r.operationID = ""
								r.pathPattern = "/v1/organizations/verifications"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

						elem = origElem
					}
					// Param: "organizationID"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "V1OrganizationsOrganizationIDGet"
							r.summary = "Get organization by id"
							r.operationID = ""
							r.pathPattern = "/v1/organizations/{organizationID}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 't': // Prefix: "tenders"
							origElem := elem
							if l := len("tenders"); len(elem) >= l && elem[0:l] == "tenders" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = "V1OrganizationsOrganizationIDTendersGet"
									r.summary = "Get all of organization tenders"
									r.operationID = ""
									r.pathPattern = "/v1/organizations/{organizationID}/tenders"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

							elem = origElem
						case 'v': // Prefix: "verifications"
							origElem := elem
							if l := len("verifications"); len(elem) >= l && elem[0:l] == "verifications" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = "V1OrganizationsOrganizationIDVerificationsGet"
									r.summary = "Get verification requests"
									r.operationID = ""
									r.pathPattern = "/v1/organizations/{organizationID}/verifications"
									r.args = args
									r.count = 1
									return r, true
								case "POST":
									r.name = "V1OrganizationsOrganizationIDVerificationsPost"
									r.summary = "Send verification request"
									r.operationID = ""
									r.pathPattern = "/v1/organizations/{organizationID}/verifications"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 's': // Prefix: "su"
				origElem := elem
				if l := len("su"); len(elem) >= l && elem[0:l] == "su" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'g': // Prefix: "ggest/c"
					origElem := elem
					if l := len("ggest/c"); len(elem) >= l && elem[0:l] == "ggest/c" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'i': // Prefix: "ity"
						origElem := elem
						if l := len("ity"); len(elem) >= l && elem[0:l] == "ity" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = "V1SuggestCityGet"
								r.summary = "Suggest city"
								r.operationID = ""
								r.pathPattern = "/v1/suggest/city"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

						elem = origElem
					case 'o': // Prefix: "ompany"
						origElem := elem
						if l := len("ompany"); len(elem) >= l && elem[0:l] == "ompany" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = "V1SuggestCompanyGet"
								r.summary = "Suggest company"
								r.operationID = ""
								r.pathPattern = "/v1/suggest/company"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

						elem = origElem
					}

					elem = origElem
				case 'r': // Prefix: "rvey"
					origElem := elem
					if l := len("rvey"); len(elem) >= l && elem[0:l] == "rvey" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "POST":
							r.name = "V1SurveyPost"
							r.summary = "Respond to a survey"
							r.operationID = ""
							r.pathPattern = "/v1/survey"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

					elem = origElem
				}

				elem = origElem
			case 't': // Prefix: "tenders"
				origElem := elem
				if l := len("tenders"); len(elem) >= l && elem[0:l] == "tenders" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = "V1TendersGet"
						r.summary = "Get tenders"
						r.operationID = ""
						r.pathPattern = "/v1/tenders"
						r.args = args
						r.count = 0
						return r, true
					case "POST":
						r.name = "V1TendersPost"
						r.summary = "Create tender"
						r.operationID = ""
						r.pathPattern = "/v1/tenders"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					origElem := elem
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'v': // Prefix: "verifications"
						origElem := elem
						if l := len("verifications"); len(elem) >= l && elem[0:l] == "verifications" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = "V1TendersVerificationsGet"
								r.summary = "Get verification requests"
								r.operationID = ""
								r.pathPattern = "/v1/tenders/verifications"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

						elem = origElem
					}
					// Param: "tenderID"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "V1TendersTenderIDGet"
							r.summary = "Get tender by id"
							r.operationID = ""
							r.pathPattern = "/v1/tenders/{tenderID}"
							r.args = args
							r.count = 1
							return r, true
						case "PUT":
							r.name = "V1TendersTenderIDPut"
							r.summary = "Update tender by id"
							r.operationID = ""
							r.pathPattern = "/v1/tenders/{tenderID}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'c': // Prefix: "comments"
							origElem := elem
							if l := len("comments"); len(elem) >= l && elem[0:l] == "comments" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = "V1TendersTenderIDCommentsGet"
									r.summary = "Get comments"
									r.operationID = ""
									r.pathPattern = "/v1/tenders/{tenderID}/comments"
									r.args = args
									r.count = 1
									return r, true
								case "POST":
									r.name = "V1TendersTenderIDCommentsPost"
									r.summary = "Send comment for tender"
									r.operationID = ""
									r.pathPattern = "/v1/tenders/{tenderID}/comments"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

							elem = origElem
						case 'r': // Prefix: "respond"
							origElem := elem
							if l := len("respond"); len(elem) >= l && elem[0:l] == "respond" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "POST":
									r.name = "V1TendersTenderIDRespondPost"
									r.summary = "Respond to a tender"
									r.operationID = ""
									r.pathPattern = "/v1/tenders/{tenderID}/respond"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'u': // Prefix: "users"
				origElem := elem
				if l := len("users"); len(elem) >= l && elem[0:l] == "users" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = "V1UsersGet"
						r.summary = "Get users"
						r.operationID = ""
						r.pathPattern = "/v1/users"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					origElem := elem
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'c': // Prefix: "confirm/"
						origElem := elem
						if l := len("confirm/"); len(elem) >= l && elem[0:l] == "confirm/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'e': // Prefix: "email"
							origElem := elem
							if l := len("email"); len(elem) >= l && elem[0:l] == "email" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "POST":
									r.name = "V1UsersConfirmEmailPost"
									r.summary = "Confirm email"
									r.operationID = ""
									r.pathPattern = "/v1/users/confirm/email"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

							elem = origElem
						case 'p': // Prefix: "password"
							origElem := elem
							if l := len("password"); len(elem) >= l && elem[0:l] == "password" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "POST":
									r.name = "V1UsersConfirmPasswordPost"
									r.summary = "Confirm reset password"
									r.operationID = ""
									r.pathPattern = "/v1/users/confirm/password"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

							elem = origElem
						}

						elem = origElem
					case 'r': // Prefix: "request/"
						origElem := elem
						if l := len("request/"); len(elem) >= l && elem[0:l] == "request/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'e': // Prefix: "email-verification"
							origElem := elem
							if l := len("email-verification"); len(elem) >= l && elem[0:l] == "email-verification" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "POST":
									r.name = "V1UsersRequestEmailVerificationPost"
									r.summary = "Requesting email verify code"
									r.operationID = ""
									r.pathPattern = "/v1/users/request/email-verification"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

							elem = origElem
						case 'r': // Prefix: "reset-password"
							origElem := elem
							if l := len("reset-password"); len(elem) >= l && elem[0:l] == "reset-password" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "POST":
									r.name = "V1UsersRequestResetPasswordPost"
									r.summary = "Requesting reset password"
									r.operationID = ""
									r.pathPattern = "/v1/users/request/reset-password"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

							elem = origElem
						}

						elem = origElem
					}
					// Param: "userID"
					// Leaf parameter
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "GET":
							r.name = "V1UsersUserIDGet"
							r.summary = "Get user by id"
							r.operationID = ""
							r.pathPattern = "/v1/users/{userID}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}

					elem = origElem
				}

				elem = origElem
			case 'v': // Prefix: "verifications/"
				origElem := elem
				if l := len("verifications/"); len(elem) >= l && elem[0:l] == "verifications/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "requestID"
				// Match until "/"
				idx := strings.IndexByte(elem, '/')
				if idx < 0 {
					idx = len(elem)
				}
				args[0] = elem[:idx]
				elem = elem[idx:]

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					origElem := elem
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'a': // Prefix: "aprove"
						origElem := elem
						if l := len("aprove"); len(elem) >= l && elem[0:l] == "aprove" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "POST":
								r.name = "V1VerificationsRequestIDAprovePost"
								r.summary = "Aprove verification request"
								r.operationID = ""
								r.pathPattern = "/v1/verifications/{requestID}/aprove"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}

						elem = origElem
					case 'd': // Prefix: "deny"
						origElem := elem
						if l := len("deny"); len(elem) >= l && elem[0:l] == "deny" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "POST":
								r.name = "V1VerificationsRequestIDDenyPost"
								r.summary = "Deny verification request"
								r.operationID = ""
								r.pathPattern = "/v1/verifications/{requestID}/deny"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			}

			elem = origElem
		}
	}
	return r, false
}
