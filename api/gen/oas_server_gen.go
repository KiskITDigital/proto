// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// V1AuthRefreshPost implements POST /v1/auth/refresh operation.
	//
	// Get new access token.
	//
	// POST /v1/auth/refresh
	V1AuthRefreshPost(ctx context.Context, params V1AuthRefreshPostParams) (V1AuthRefreshPostRes, error)
	// V1AuthSigninPost implements POST /v1/auth/signin operation.
	//
	// Signin User.
	//
	// POST /v1/auth/signin
	V1AuthSigninPost(ctx context.Context, req *V1AuthSigninPostReq) (V1AuthSigninPostRes, error)
	// V1AuthSignupPost implements POST /v1/auth/signup operation.
	//
	// Signup User.
	//
	// POST /v1/auth/signup
	V1AuthSignupPost(ctx context.Context, req *V1AuthSignupPostReq) (V1AuthSignupPostRes, error)
	// V1AuthUserGet implements GET /v1/auth/user operation.
	//
	// Get currently authenticated user.
	//
	// GET /v1/auth/user
	V1AuthUserGet(ctx context.Context) (V1AuthUserGetRes, error)
	// V1CatalogCitiesPost implements POST /v1/catalog/cities operation.
	//
	// Add city to catalog.
	//
	// POST /v1/catalog/cities
	V1CatalogCitiesPost(ctx context.Context, req *V1CatalogCitiesPostReq) (V1CatalogCitiesPostRes, error)
	// V1CatalogObjectsGet implements GET /v1/catalog/objects operation.
	//
	// Get a list of all available objects.
	//
	// GET /v1/catalog/objects
	V1CatalogObjectsGet(ctx context.Context) (V1CatalogObjectsGetRes, error)
	// V1CatalogObjectsPost implements POST /v1/catalog/objects operation.
	//
	// Create catalog object.
	//
	// POST /v1/catalog/objects
	V1CatalogObjectsPost(ctx context.Context, req *V1CatalogObjectsPostReq) (V1CatalogObjectsPostRes, error)
	// V1CatalogRegionsPost implements POST /v1/catalog/regions operation.
	//
	// Add region to catalog.
	//
	// POST /v1/catalog/regions
	V1CatalogRegionsPost(ctx context.Context, req *V1CatalogRegionsPostReq) (V1CatalogRegionsPostRes, error)
	// V1CatalogServicesGet implements GET /v1/catalog/services operation.
	//
	// Get a list of all available services.
	//
	// GET /v1/catalog/services
	V1CatalogServicesGet(ctx context.Context) (V1CatalogServicesGetRes, error)
	// V1CatalogServicesPost implements POST /v1/catalog/services operation.
	//
	// Create catalog service.
	//
	// POST /v1/catalog/services
	V1CatalogServicesPost(ctx context.Context, req *V1CatalogServicesPostReq) (V1CatalogServicesPostRes, error)
	// V1OrganizationsOrganizationIDTendersGet implements GET /v1/organizations/{organizationID}/tenders operation.
	//
	// If user in organization it also return all drafts.
	//
	// GET /v1/organizations/{organizationID}/tenders
	V1OrganizationsOrganizationIDTendersGet(ctx context.Context, params V1OrganizationsOrganizationIDTendersGetParams) (V1OrganizationsOrganizationIDTendersGetRes, error)
	// V1SurveyPost implements POST /v1/survey operation.
	//
	// Response to survey.
	//
	// POST /v1/survey
	V1SurveyPost(ctx context.Context, req *V1SurveyPostReq) (V1SurveyPostRes, error)
	// V1TendersGet implements GET /v1/tenders operation.
	//
	// Get all tenders.
	//
	// GET /v1/tenders
	V1TendersGet(ctx context.Context) (V1TendersGetRes, error)
	// V1TendersPost implements POST /v1/tenders operation.
	//
	// Create tender.
	//
	// POST /v1/tenders
	V1TendersPost(ctx context.Context, req *V1TendersPostReq) (V1TendersPostRes, error)
	// V1TendersTenderIDGet implements GET /v1/tenders/{tenderID} operation.
	//
	// Get tender by id.
	//
	// GET /v1/tenders/{tenderID}
	V1TendersTenderIDGet(ctx context.Context, params V1TendersTenderIDGetParams) (V1TendersTenderIDGetRes, error)
	// V1TendersTenderIDPut implements PUT /v1/tenders/{tenderID} operation.
	//
	// Update tender by id.
	//
	// PUT /v1/tenders/{tenderID}
	V1TendersTenderIDPut(ctx context.Context, req *V1TendersTenderIDPutReq, params V1TendersTenderIDPutParams) (V1TendersTenderIDPutRes, error)
	// V1UsersUserIDGet implements GET /v1/users/{userID} operation.
	//
	// Get user by id.
	//
	// GET /v1/users/{userID}
	V1UsersUserIDGet(ctx context.Context, params V1UsersUserIDGetParams) (V1UsersUserIDGetRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	sec SecurityHandler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, sec SecurityHandler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		sec:        sec,
		baseServer: s,
	}, nil
}
