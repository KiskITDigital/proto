// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// V1AuthLogoutPost implements POST /v1/auth/logout operation.
	//
	// Terminates the user session.
	//
	// POST /v1/auth/logout
	V1AuthLogoutPost(ctx context.Context, params V1AuthLogoutPostParams) (V1AuthLogoutPostRes, error)
	// V1AuthRefreshPost implements POST /v1/auth/refresh operation.
	//
	// Get new access token.
	//
	// POST /v1/auth/refresh
	V1AuthRefreshPost(ctx context.Context, params V1AuthRefreshPostParams) (V1AuthRefreshPostRes, error)
	// V1AuthSigninPost implements POST /v1/auth/signin operation.
	//
	// Signin User.
	//
	// POST /v1/auth/signin
	V1AuthSigninPost(ctx context.Context, req *V1AuthSigninPostReq) (V1AuthSigninPostRes, error)
	// V1AuthSignupPost implements POST /v1/auth/signup operation.
	//
	// Signup User.
	//
	// POST /v1/auth/signup
	V1AuthSignupPost(ctx context.Context, req *V1AuthSignupPostReq) (V1AuthSignupPostRes, error)
	// V1AuthUserGet implements GET /v1/auth/user operation.
	//
	// Get currently authenticated user.
	//
	// GET /v1/auth/user
	V1AuthUserGet(ctx context.Context) (V1AuthUserGetRes, error)
	// V1CatalogCitiesPost implements POST /v1/catalog/cities operation.
	//
	// Adds city to catalog
	// **[Role](https://youtrack.ubrato.ru/articles/UBR-A-7/Roli-privilegii) required**:
	// 'Admin' or higher.
	//
	// POST /v1/catalog/cities
	V1CatalogCitiesPost(ctx context.Context, req *V1CatalogCitiesPostReq) (V1CatalogCitiesPostRes, error)
	// V1CatalogObjectsGet implements GET /v1/catalog/objects operation.
	//
	// Lists all available objects.
	//
	// GET /v1/catalog/objects
	V1CatalogObjectsGet(ctx context.Context, params V1CatalogObjectsGetParams) (V1CatalogObjectsGetRes, error)
	// V1CatalogObjectsPost implements POST /v1/catalog/objects operation.
	//
	// Creates catalog object
	// **[Role](https://youtrack.ubrato.ru/articles/UBR-A-7/Roli-privilegii) required**:
	// 'Admin' or higher.
	//
	// POST /v1/catalog/objects
	V1CatalogObjectsPost(ctx context.Context, req *V1CatalogObjectsPostReq) (V1CatalogObjectsPostRes, error)
	// V1CatalogRegionsPost implements POST /v1/catalog/regions operation.
	//
	// Adds region to catalog
	// **[Role](https://youtrack.ubrato.ru/articles/UBR-A-7/Roli-privilegii) required**:
	// 'Admin' or higher.
	//
	// POST /v1/catalog/regions
	V1CatalogRegionsPost(ctx context.Context, req *V1CatalogRegionsPostReq) (V1CatalogRegionsPostRes, error)
	// V1CatalogServicesGet implements GET /v1/catalog/services operation.
	//
	// Lists all available services.
	//
	// GET /v1/catalog/services
	V1CatalogServicesGet(ctx context.Context, params V1CatalogServicesGetParams) (V1CatalogServicesGetRes, error)
	// V1CatalogServicesPost implements POST /v1/catalog/services operation.
	//
	// Creates catalog service
	// **[Role](https://youtrack.ubrato.ru/articles/UBR-A-7/Roli-privilegii) required**:
	// 'Admin' or higher.
	//
	// POST /v1/catalog/services
	V1CatalogServicesPost(ctx context.Context, req *V1CatalogServicesPostReq) (V1CatalogServicesPostRes, error)
	// V1CommentsVerificationsGet implements GET /v1/comments/verifications operation.
	//
	// Get all verifications requests
	// **[Role](https://youtrack.ubrato.ru/articles/UBR-A-7/Roli-privilegii) required**:
	// 'Employee' or higher.
	//
	// GET /v1/comments/verifications
	V1CommentsVerificationsGet(ctx context.Context, params V1CommentsVerificationsGetParams) (V1CommentsVerificationsGetRes, error)
	// V1EmployeePost implements POST /v1/employee operation.
	//
	// Create employee user.
	//
	// POST /v1/employee
	V1EmployeePost(ctx context.Context, req *V1EmployeePostReq) (V1EmployeePostRes, error)
	// V1OrganizationsContractorsGet implements GET /v1/organizations/contractors operation.
	//
	// Получить всех исполнителей (verifed=true, banned=false).
	//
	// GET /v1/organizations/contractors
	V1OrganizationsContractorsGet(ctx context.Context, params V1OrganizationsContractorsGetParams) (V1OrganizationsContractorsGetRes, error)
	// V1OrganizationsGet implements GET /v1/organizations operation.
	//
	// List all organizations
	// Для получения всех организаций (включая
	// неверифицированные)
	// **[Role](https://youtrack.ubrato.ru/articles/UBR-A-7/Roli-privilegii) required**:
	// 'Employee' or higher.
	//
	// GET /v1/organizations
	V1OrganizationsGet(ctx context.Context, params V1OrganizationsGetParams) (V1OrganizationsGetRes, error)
	// V1OrganizationsOrganizationIDGet implements GET /v1/organizations/{organizationID} operation.
	//
	// Returns organization by id.
	//
	// GET /v1/organizations/{organizationID}
	V1OrganizationsOrganizationIDGet(ctx context.Context, params V1OrganizationsOrganizationIDGetParams) (V1OrganizationsOrganizationIDGetRes, error)
	// V1OrganizationsOrganizationIDPortfolioGet implements GET /v1/organizations/{organizationID}/portfolio operation.
	//
	// Получает список всех портфолио для исполнителя.
	//
	// GET /v1/organizations/{organizationID}/portfolio
	V1OrganizationsOrganizationIDPortfolioGet(ctx context.Context, params V1OrganizationsOrganizationIDPortfolioGetParams) (V1OrganizationsOrganizationIDPortfolioGetRes, error)
	// V1OrganizationsOrganizationIDPortfolioPost implements POST /v1/organizations/{organizationID}/portfolio operation.
	//
	// Добавляет портфолио в профиль исполнителя.
	//
	// POST /v1/organizations/{organizationID}/portfolio
	V1OrganizationsOrganizationIDPortfolioPost(ctx context.Context, req *V1OrganizationsOrganizationIDPortfolioPostReq, params V1OrganizationsOrganizationIDPortfolioPostParams) (V1OrganizationsOrganizationIDPortfolioPostRes, error)
	// V1OrganizationsOrganizationIDProfileBrandPut implements PUT /v1/organizations/{organizationID}/profile/brand operation.
	//
	// Обновляет название бренда или URL изображения для
	// организации.
	//
	// PUT /v1/organizations/{organizationID}/profile/brand
	V1OrganizationsOrganizationIDProfileBrandPut(ctx context.Context, req *V1OrganizationsOrganizationIDProfileBrandPutReq, params V1OrganizationsOrganizationIDProfileBrandPutParams) (V1OrganizationsOrganizationIDProfileBrandPutRes, error)
	// V1OrganizationsOrganizationIDProfileContactsPut implements PUT /v1/organizations/{organizationID}/profile/contacts operation.
	//
	// Обновляет контактные данные для организации.
	//
	// PUT /v1/organizations/{organizationID}/profile/contacts
	V1OrganizationsOrganizationIDProfileContactsPut(ctx context.Context, req *V1OrganizationsOrganizationIDProfileContactsPutReq, params V1OrganizationsOrganizationIDProfileContactsPutParams) (V1OrganizationsOrganizationIDProfileContactsPutRes, error)
	// V1OrganizationsOrganizationIDProfileContractorPut implements PUT /v1/organizations/{organizationID}/profile/contractor operation.
	//
	// Обновляет профиль исполнителя.
	//
	// PUT /v1/organizations/{organizationID}/profile/contractor
	V1OrganizationsOrganizationIDProfileContractorPut(ctx context.Context, req *V1OrganizationsOrganizationIDProfileContractorPutReq, params V1OrganizationsOrganizationIDProfileContractorPutParams) (V1OrganizationsOrganizationIDProfileContractorPutRes, error)
	// V1OrganizationsOrganizationIDProfileCustomerPut implements PUT /v1/organizations/{organizationID}/profile/customer operation.
	//
	// Обновляет описание компании или список локаций в
	// профиле заказчика.
	//
	// PUT /v1/organizations/{organizationID}/profile/customer
	V1OrganizationsOrganizationIDProfileCustomerPut(ctx context.Context, req *V1OrganizationsOrganizationIDProfileCustomerPutReq, params V1OrganizationsOrganizationIDProfileCustomerPutParams) (V1OrganizationsOrganizationIDProfileCustomerPutRes, error)
	// V1OrganizationsOrganizationIDTendersGet implements GET /v1/organizations/{organizationID}/tenders operation.
	//
	// If user is in organization it also returns all drafts.
	//
	// GET /v1/organizations/{organizationID}/tenders
	V1OrganizationsOrganizationIDTendersGet(ctx context.Context, params V1OrganizationsOrganizationIDTendersGetParams) (V1OrganizationsOrganizationIDTendersGetRes, error)
	// V1OrganizationsOrganizationIDVerificationsGet implements GET /v1/organizations/{organizationID}/verifications operation.
	//
	// Get organization verification history.
	//
	// GET /v1/organizations/{organizationID}/verifications
	V1OrganizationsOrganizationIDVerificationsGet(ctx context.Context, params V1OrganizationsOrganizationIDVerificationsGetParams) (V1OrganizationsOrganizationIDVerificationsGetRes, error)
	// V1OrganizationsOrganizationIDVerificationsPost implements POST /v1/organizations/{organizationID}/verifications operation.
	//
	// Ask verify organization.
	//
	// POST /v1/organizations/{organizationID}/verifications
	V1OrganizationsOrganizationIDVerificationsPost(ctx context.Context, req []Attachment, params V1OrganizationsOrganizationIDVerificationsPostParams) (V1OrganizationsOrganizationIDVerificationsPostRes, error)
	// V1OrganizationsPortfolioPortfolioIDDelete implements DELETE /v1/organizations/portfolio/{portfolioID} operation.
	//
	// Удаляет портфолио из профиля исполнителя.
	//
	// DELETE /v1/organizations/portfolio/{portfolioID}
	V1OrganizationsPortfolioPortfolioIDDelete(ctx context.Context, params V1OrganizationsPortfolioPortfolioIDDeleteParams) (V1OrganizationsPortfolioPortfolioIDDeleteRes, error)
	// V1OrganizationsPortfolioPortfolioIDPut implements PUT /v1/organizations/portfolio/{portfolioID} operation.
	//
	// Обновляет информацию о портфолио в профиле
	// исполнителя.
	//
	// PUT /v1/organizations/portfolio/{portfolioID}
	V1OrganizationsPortfolioPortfolioIDPut(ctx context.Context, req *V1OrganizationsPortfolioPortfolioIDPutReq, params V1OrganizationsPortfolioPortfolioIDPutParams) (V1OrganizationsPortfolioPortfolioIDPutRes, error)
	// V1OrganizationsVerificationsGet implements GET /v1/organizations/verifications operation.
	//
	// Get verifications
	// **[Role](https://youtrack.ubrato.ru/articles/UBR-A-7/Roli-privilegii) required**:
	// 'Employee' or higher.
	//
	// GET /v1/organizations/verifications
	V1OrganizationsVerificationsGet(ctx context.Context, params V1OrganizationsVerificationsGetParams) (V1OrganizationsVerificationsGetRes, error)
	// V1QuestionnaireGet implements GET /v1/questionnaire operation.
	//
	// Get all contractor's questionnaire answers with pagination
	// **[Role](https://youtrack.ubrato.ru/articles/UBR-A-7/Roli-privilegii) required**:
	// 'Employee' or higher.
	//
	// GET /v1/questionnaire
	V1QuestionnaireGet(ctx context.Context, params V1QuestionnaireGetParams) (V1QuestionnaireGetRes, error)
	// V1QuestionnaireOrganizationIDPost implements POST /v1/questionnaire/{organizationID} operation.
	//
	// Save the contractor's answers to the questionnaire.
	//
	// POST /v1/questionnaire/{organizationID}
	V1QuestionnaireOrganizationIDPost(ctx context.Context, req *V1QuestionnaireOrganizationIDPostReq, params V1QuestionnaireOrganizationIDPostParams) (V1QuestionnaireOrganizationIDPostRes, error)
	// V1QuestionnaireOrganizationIDStatusGet implements GET /v1/questionnaire/{organizationID}/status operation.
	//
	// Retrieve the status of a contractor's questionnaire.
	//
	// GET /v1/questionnaire/{organizationID}/status
	V1QuestionnaireOrganizationIDStatusGet(ctx context.Context, params V1QuestionnaireOrganizationIDStatusGetParams) (V1QuestionnaireOrganizationIDStatusGetRes, error)
	// V1SuggestCityGet implements GET /v1/suggest/city operation.
	//
	// Suggests a city with provided city name.
	//
	// GET /v1/suggest/city
	V1SuggestCityGet(ctx context.Context, params V1SuggestCityGetParams) (V1SuggestCityGetRes, error)
	// V1SuggestCompanyGet implements GET /v1/suggest/company operation.
	//
	// Suggests a company with provided INN.
	//
	// GET /v1/suggest/company
	V1SuggestCompanyGet(ctx context.Context, params V1SuggestCompanyGetParams) (V1SuggestCompanyGetRes, error)
	// V1SurveyPost implements POST /v1/survey operation.
	//
	// Respond to a survey.
	//
	// POST /v1/survey
	V1SurveyPost(ctx context.Context, req *V1SurveyPostReq) (V1SurveyPostRes, error)
	// V1TendersGet implements GET /v1/tenders operation.
	//
	// **Без JWT или с ролью "User"**:
	// Возвращает тендеры только со статусом "Approved".
	// **Для сотрудников ("Employee") и выше**:
	// Возвращает все тендеры, включая неверифицированные.
	//
	// GET /v1/tenders
	V1TendersGet(ctx context.Context, params V1TendersGetParams) (V1TendersGetRes, error)
	// V1TendersPost implements POST /v1/tenders operation.
	//
	// Creates a new tender.
	//
	// POST /v1/tenders
	V1TendersPost(ctx context.Context, req *V1TendersPostReq) (V1TendersPostRes, error)
	// V1TendersTenderIDCommentsGet implements GET /v1/tenders/{tenderID}/comments operation.
	//
	// Get comments under tender.
	//
	// GET /v1/tenders/{tenderID}/comments
	V1TendersTenderIDCommentsGet(ctx context.Context, params V1TendersTenderIDCommentsGetParams) (V1TendersTenderIDCommentsGetRes, error)
	// V1TendersTenderIDCommentsPost implements POST /v1/tenders/{tenderID}/comments operation.
	//
	// Leaves comment under tender.
	//
	// POST /v1/tenders/{tenderID}/comments
	V1TendersTenderIDCommentsPost(ctx context.Context, req *V1TendersTenderIDCommentsPostReq, params V1TendersTenderIDCommentsPostParams) (V1TendersTenderIDCommentsPostRes, error)
	// V1TendersTenderIDGet implements GET /v1/tenders/{tenderID} operation.
	//
	// Returns tender by id
	// Для получения неверифицированного тендера
	// **[Role](https://youtrack.ubrato.ru/articles/UBR-A-7/Roli-privilegii) required**:
	// 'Employee' or higher.
	//
	// GET /v1/tenders/{tenderID}
	V1TendersTenderIDGet(ctx context.Context, params V1TendersTenderIDGetParams) (V1TendersTenderIDGetRes, error)
	// V1TendersTenderIDPut implements PUT /v1/tenders/{tenderID} operation.
	//
	// Update tender by id.
	//
	// PUT /v1/tenders/{tenderID}
	V1TendersTenderIDPut(ctx context.Context, req *V1TendersTenderIDPutReq, params V1TendersTenderIDPutParams) (V1TendersTenderIDPutRes, error)
	// V1TendersTenderIDQuestionAnswerGet implements GET /v1/tenders/{tenderID}/question-answer operation.
	//
	// Получить все вопросы и ответы, связанные с конкретным
	// тендером.
	//
	// GET /v1/tenders/{tenderID}/question-answer
	V1TendersTenderIDQuestionAnswerGet(ctx context.Context, params V1TendersTenderIDQuestionAnswerGetParams) (V1TendersTenderIDQuestionAnswerGetRes, error)
	// V1TendersTenderIDQuestionAnswerPost implements POST /v1/tenders/{tenderID}/question-answer operation.
	//
	// Заказчик: Отвечает на вопрос
	// Исполнитель: Создает вопрос для тендера.
	//
	// POST /v1/tenders/{tenderID}/question-answer
	V1TendersTenderIDQuestionAnswerPost(ctx context.Context, req *V1TendersTenderIDQuestionAnswerPostReq, params V1TendersTenderIDQuestionAnswerPostParams) (V1TendersTenderIDQuestionAnswerPostRes, error)
	// V1TendersTenderIDRespondPost implements POST /v1/tenders/{tenderID}/respond operation.
	//
	// Responds to a tender.
	//
	// POST /v1/tenders/{tenderID}/respond
	V1TendersTenderIDRespondPost(ctx context.Context, req *V1TendersTenderIDRespondPostReq, params V1TendersTenderIDRespondPostParams) (V1TendersTenderIDRespondPostRes, error)
	// V1TendersVerificationsGet implements GET /v1/tenders/verifications operation.
	//
	// Get verifications
	// **[Role](https://youtrack.ubrato.ru/articles/UBR-A-7/Roli-privilegii) required**:
	// 'Employee' or higher.
	//
	// GET /v1/tenders/verifications
	V1TendersVerificationsGet(ctx context.Context, params V1TendersVerificationsGetParams) (V1TendersVerificationsGetRes, error)
	// V1UsersConfirmEmailPost implements POST /v1/users/confirm/email operation.
	//
	// Confirm email use a code from mail.
	//
	// POST /v1/users/confirm/email
	V1UsersConfirmEmailPost(ctx context.Context, req *V1UsersConfirmEmailPostReq) (V1UsersConfirmEmailPostRes, error)
	// V1UsersConfirmPasswordPost implements POST /v1/users/confirm/password operation.
	//
	// Confirm reset password use a code from mail.
	//
	// POST /v1/users/confirm/password
	V1UsersConfirmPasswordPost(ctx context.Context, req *V1UsersConfirmPasswordPostReq) (V1UsersConfirmPasswordPostRes, error)
	// V1UsersGet implements GET /v1/users operation.
	//
	// Returns all users
	// **[Role](https://youtrack.ubrato.ru/articles/UBR-A-7/Roli-privilegii) required**:
	// 'Employee' or higher.
	//
	// GET /v1/users
	V1UsersGet(ctx context.Context, params V1UsersGetParams) (V1UsersGetRes, error)
	// V1UsersRequestEmailVerificationPost implements POST /v1/users/request/email-verification operation.
	//
	// Requesting send verify code.
	//
	// POST /v1/users/request/email-verification
	V1UsersRequestEmailVerificationPost(ctx context.Context, req *V1UsersRequestEmailVerificationPostReq) (V1UsersRequestEmailVerificationPostRes, error)
	// V1UsersRequestResetPasswordPost implements POST /v1/users/request/reset-password operation.
	//
	// Requesting send reset code.
	//
	// POST /v1/users/request/reset-password
	V1UsersRequestResetPasswordPost(ctx context.Context, req *V1UsersRequestResetPasswordPostReq) (V1UsersRequestResetPasswordPostRes, error)
	// V1UsersUserIDGet implements GET /v1/users/{userID} operation.
	//
	// Returns user by id
	// **[Role](https://youtrack.ubrato.ru/articles/UBR-A-7/Roli-privilegii) required**:
	// 'Employee' or higher.
	//
	// GET /v1/users/{userID}
	V1UsersUserIDGet(ctx context.Context, params V1UsersUserIDGetParams) (V1UsersUserIDGetRes, error)
	// V1UsersUserIDPut implements PUT /v1/users/{userID} operation.
	//
	// Обновляет информацию профиля пользователя.
	//
	// PUT /v1/users/{userID}
	V1UsersUserIDPut(ctx context.Context, req *V1UsersUserIDPutReq, params V1UsersUserIDPutParams) (V1UsersUserIDPutRes, error)
	// V1VerificationsRequestIDAprovePost implements POST /v1/verifications/{requestID}/aprove operation.
	//
	// Aproving verification
	// **[Role](https://youtrack.ubrato.ru/articles/UBR-A-7/Roli-privilegii) required**:
	// 'Employee' or higher.
	//
	// POST /v1/verifications/{requestID}/aprove
	V1VerificationsRequestIDAprovePost(ctx context.Context, params V1VerificationsRequestIDAprovePostParams) (V1VerificationsRequestIDAprovePostRes, error)
	// V1VerificationsRequestIDDenyPost implements POST /v1/verifications/{requestID}/deny operation.
	//
	// Denying verification
	// **[Role](https://youtrack.ubrato.ru/articles/UBR-A-7/Roli-privilegii) required**:
	// 'Employee' or higher.
	//
	// POST /v1/verifications/{requestID}/deny
	V1VerificationsRequestIDDenyPost(ctx context.Context, params V1VerificationsRequestIDDenyPostParams) (V1VerificationsRequestIDDenyPostRes, error)
	// V1VerificationsRequestIDGet implements GET /v1/verifications/{requestID} operation.
	//
	// Returns verification request by id
	// **[Role](https://youtrack.ubrato.ru/articles/UBR-A-7/Roli-privilegii) required**:
	// 'Employee' or higher.
	//
	// GET /v1/verifications/{requestID}
	V1VerificationsRequestIDGet(ctx context.Context, params V1VerificationsRequestIDGetParams) (V1VerificationsRequestIDGetRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	sec SecurityHandler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, sec SecurityHandler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		sec:        sec,
		baseServer: s,
	}, nil
}
